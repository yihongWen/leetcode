package zyj.yihong.leetcode.random_select.seg;

import java.util.*;

// 752. 打开转盘锁
public class OpenLock_M_752 {
    public int openLock(String[] deadends, String target) {
        String startState = "0000";
        if (Objects.equals(startState, target)) {
            return 0;
        }

        // 将deadends方置在Set中
        Set<String> deadSet = new HashSet<>();
        for (String deadend : deadends) {
            deadSet.add(deadend);
        }

        if (deadSet.contains(startState)) {
            return -1;
        }

        Map<String, Integer> handleMap = new HashMap<>();
        handleMap.put(startState, 0);

        PriorityQueue<String> priorityQueue = new PriorityQueue<>((state1, state2) -> {
            int cost1 = costFunction(state1, target) + handleMap.get(state1);
            int cost2 = costFunction(state2, target) + handleMap.get(state2);
            return cost1 - cost2;
        });

        priorityQueue.offer(startState);

        while (priorityQueue.size() != 0) {
            String curState = priorityQueue.poll();
            Integer step = handleMap.get(curState);
            if (Objects.equals(curState,target)){
                return step;
            }
            List<String> nextStateList = getNextState(curState);
            for (String nextState : nextStateList) {
                if (deadSet.contains(nextState)){
                    continue;
                }
                if (!handleMap.containsKey(nextState) || handleMap.get(nextState)>step+1) {
                    handleMap.put(nextState, step + 1);
                    priorityQueue.offer(nextState);
                }
            }

        }

        return -1;
    }

    private List<String> getNextState(String state) {
        List<String> ans = new ArrayList<>();
        char[] stateCharArr = state.toCharArray();
        for (int i = 0; i < state.length(); i++) {
            char c = stateCharArr[i];
            char c1 = c == '9' ? '0' : (char) (c + 1);
            stateCharArr[i] = c1;
            ans.add(String.valueOf(stateCharArr));
            stateCharArr[i] = c;
            c1 = c == '0' ? '9' : (char) (c - 1);
            stateCharArr[i] = c1;
            ans.add(String.valueOf(stateCharArr));
            stateCharArr[i] = c;
        }

        return ans;
    }


    private int costFunction(String state1, String state2) {
        int ans = 0;
        for (int i = 0; i < state1.length(); i++) {
            int si1 = state1.charAt(i) - '0';
            int si2 = state2.charAt(i) - '0';
            int abs = Math.abs(si1 - si2);
            // 判断正反顺序哪个代价较小
            ans += Math.min(abs, 10 - abs);
        }
        return ans;
    }

    public static void main(String[] args) {
        String[] dead = {"6687", "6766", "7776", "6886", "6768", "8877", "6878", "7876", "6866", "6876", "7687", "7787", "8878", "7866", "6677", "6667", "8887", "7867", "8678", "6677", "8866", "8788", "7688", "7667", "8786", "8767", "6788", "8876", "7868", "8778", "8687", "6768", "6876", "7887", "7767", "7686", "7887", "6668", "6686", "6668", "6766", "6886", "6777", "6867", "8887", "7666", "8676", "7868", "6767", "8866", "7686", "7868", "7866", "7866", "7778", "6668", "8676", "8668", "8868", "7666", "6788", "7778", "8667", "7778", "6678", "6887", "7867", "6686", "7678", "8666", "8886", "8666", "6878", "7778", "7786", "8786", "8666", "8866", "6687", "8767", "6766", "6668", "7786", "7887", "6686", "8767", "7766", "7676", "8668", "8786", "8866", "6668", "6666", "6886", "6788", "8687", "6866", "6687", "6768", "6776", "7776", "8766", "7887", "6678", "6878", "8787", "8687", "6887", "8788", "8886", "8887", "7767", "8888", "8688", "8767", "8787", "7867", "7677", "7686", "6887", "7778", "8788", "7778", "6688", "6668", "7867", "8876", "6877", "6886", "8678", "8787", "7678", "8888", "8866", "6877", "6868", "7688", "7688", "6888", "8687", "6668", "6688", "7887", "6886", "6766", "8877", "8877", "7676", "7778", "8687", "6677", "6768", "8678", "6867", "7787", "7778", "6676", "7686", "7778", "8768", "8668", "7867", "6886", "8877", "6887", "8768", "6768", "6687", "8867", "7877", "8778", "7867", "8688", "6688", "6767", "7886", "6888", "8876", "7677", "7887", "8876", "8866", "7668", "8766", "6887", "8678", "6776", "8786", "6886", "8788", "7867", "7868", "7666", "7878", "7878", "6886", "7667", "6878", "8887", "7776", "7776", "8887", "7878", "8688", "7787", "8677", "8878", "8887", "8768", "8877", "8678", "8768", "7688", "6866", "8787", "7887", "6877", "6867", "7887", "7868", "8776", "6866", "7767", "6666", "6868", "8688", "7666", "7786", "8776", "8686", "6678", "6878", "7768", "6878", "6687", "7786", "6668", "7688", "7887", "6886", "8788", "6787", "7766", "6878", "6687", "8868", "6868", "7666", "6788", "8786", "8676", "8777", "7766", "8677", "7667", "6777", "7777", "8877", "8878", "8887", "7878", "6768", "7666", "7887", "8687", "8667", "8878", "8678", "7688", "6688", "8778", "7876", "8778", "8778", "6677", "6767", "8868", "6676", "8687", "7686", "7767", "6766", "7888", "6678", "8787", "8878", "6768", "7877", "8868", "6676", "6666", "6668", "8868", "7777", "6888", "7787", "6887", "8677", "7768", "7766", "8887", "6887", "7668", "8787", "8888", "6668", "6777", "7666", "7666", "6687", "8686", "6668", "6676", "8787", "6666", "8876", "7876", "7787", "7688", "6788", "7887", "8778", "6866", "8768", "7788", "8766", "6678", "6766", "8788", "8888", "7878", "8768", "6887", "8886", "8876", "7788", "6777", "8767", "7788", "6787", "6668", "6666", "7688", "8678", "6878", "8676", "6768", "7666", "7867", "7676", "6687", "8688", "8768", "6868", "6666", "8687", "6768", "8687", "7877", "6777", "7878", "8867", "8867", "7866", "6677", "7667", "8676", "7668", "7768", "7788", "7687", "7878", "7766", "7868", "8766", "6888", "6886", "7786", "8678", "8676", "8668", "7778", "8878", "7678", "7687", "8668", "7767", "7886", "6667", "7867", "7776", "6786", "7778", "7886", "8787", "6668", "7786", "8776", "6867", "6878", "7867", "8778", "7767", "7878", "8876", "7867", "7686", "8776", "6768", "8788", "8666", "8867", "8687", "7788", "6878", "7886", "8688", "8866", "8686", "6788", "8886", "6676", "8778", "8676", "6787", "6777", "7688", "6668", "6877", "6686", "7876", "7778", "8667", "7887", "6787", "8778", "6777", "6676", "7688", "6678", "7668", "7768", "7688", "7778", "8867", "6787", "6867", "7767", "7767", "7688", "8778", "6767", "8877", "6678", "6886", "6877", "6686", "7667", "6786", "8666", "6786", "7687", "7666", "8767", "6786", "7888", "6886", "8678", "7886", "7767", "8777", "7676", "7686", "6867", "6668", "6677", "6766", "8788", "7868", "6876", "6686", "8787", "6877", "8876", "8776", "6878", "8676", "7667", "6776", "6886", "7766", "7676", "6886", "8687", "6887", "8687", "8777", "6687", "8866", "8886"};
        String end = "6778";
        OpenLock_M_752 openLock_m_752 = new OpenLock_M_752();
        int i = openLock_m_752.openLock(dead, end);
        System.out.println(i);
    }

}
